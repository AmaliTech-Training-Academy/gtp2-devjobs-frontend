name: Deploy to ECS (Production)

on:
  workflow_call:
    secrets:
      AWS_REGION:
        required: true
      AWS_ROLE_TO_ASSUME:
        required: true
      ECS_CLUSTER:
        required: true
      ECS_SERVICE:
        required: true
      PROD_ECR_REPO:
        required: true
      EXECUTION_ROLE_ARN:
        required: true
      TASK_CPU:
        required: true
      TASK_MEMORY:
        required: true
      CONTAINER_NAME:
        required: true
      CONTAINER_PORT:
        required: true
      TASK_FAMILY:
        required: true
      TASK_LOG_GROUP:
        required: true

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Construct image URI
        id: compute
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          IMAGE_TAG=${{ github.sha }}-prod
          IMAGE_URI="${ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.PROD_ECR_REPO }}:${IMAGE_TAG}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Create ECS task definition dynamically
        run: |
          cat <<EOF > task-def.json
          {
            "family": "$(echo -n "${{ secrets.TASK_FAMILY }}")",
            "networkMode": "awsvpc",
            "cpu": "${{ secrets.TASK_CPU }}",
            "memory": "${{ secrets.TASK_MEMORY }}",
            "requiresCompatibilities": ["FARGATE"],
            "executionRoleArn": "$(echo -n "${{ secrets.EXECUTION_ROLE_ARN }}")",
            "containerDefinitions": [
              {
                "name": "$(echo -n "${{ secrets.CONTAINER_NAME }}")",
                "image": "${IMAGE_URI}",
                "portMappings": [
                  {
                    "containerPort": ${{ secrets.CONTAINER_PORT }},
                    "hostPort": ${{ secrets.CONTAINER_PORT }},
                    "protocol": "tcp"
                  }
                ],
                "essential": true,
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "$(echo -n "${{ secrets.TASK_LOG_GROUP }}")",
                    "awslogs-region": "$(echo -n "${{ secrets.AWS_REGION }}")",
                    "awslogs-stream-prefix": "frontend-prod"
                  }
                }
              }
            ]
          }
          EOF

      - name: Validate task definition JSON
        run: |
          echo "Validating task definition JSON..."
          cat task-def.json
          jq . task-def.json > /dev/null || echo "Invalid JSON in task-def.json"

      - name: Register new ECS task definition
        id: task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-def.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Debug ECS parameters
        run: |
          echo "Cluster: '${{ secrets.ECS_CLUSTER }}'"
          echo "Service: '${{ secrets.ECS_SERVICE }}'"
          echo "Task Definition ARN: '$TASK_DEF_ARN'"
          echo "Region: '${{ secrets.AWS_REGION }}'"

      - name: Force ECS deployment
        run: |
          # Check if ECS_SERVICE is set
          if [ -z "${{ secrets.ECS_SERVICE }}" ]; then
            echo "Error: ECS_SERVICE secret is not set or is empty"
            exit 1
          fi

          # Check if ECS_CLUSTER is set
          if [ -z "${{ secrets.ECS_CLUSTER }}" ]; then
            echo "Error: ECS_CLUSTER secret is not set or is empty"
            exit 1
          fi

          # Sanitize cluster and service names
          CLUSTER_NAME=$(echo -n "${{ secrets.ECS_CLUSTER }}")
          SERVICE_NAME=$(echo -n "${{ secrets.ECS_SERVICE }}")
          
          echo "Using sanitized cluster name: '$CLUSTER_NAME'"
          echo "Using sanitized service name: '$SERVICE_NAME'"
          
          aws ecs update-service \
            --cluster "$CLUSTER_NAME" \
            --service "$SERVICE_NAME" \
            --task-definition "$TASK_DEF_ARN" \
            --force-new-deployment \
            --region "${{ secrets.AWS_REGION }}"