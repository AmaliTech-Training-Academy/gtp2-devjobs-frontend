name: Frontend Dev CI/CD

on:
  push:
    branches:
      - development
      - feature/devops
      - testing

permissions:
  id-token: write
  contents: read

jobs:
  qa:
    name: Run QA Checks
    runs-on: self-hosted
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Store original branch and commit
        id: vars
        run: |
          echo "original_branch=${GITHUB_REF#refs/heads/}" >> "$GITHUB_OUTPUT"
          echo "original_commit=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          echo "Original branch: ${GITHUB_REF#refs/heads/}"
          echo "Original commit: ${GITHUB_SHA}"

      - name: Switch to qa branch
        run: |
          echo "Fetching QA branch..."
          git fetch origin qa/automation-framework-setup
          echo "Switching to QA branch..."
          git checkout qa/automation-framework-setup
          echo "Currently on branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "QA branch commit: $(git rev-parse HEAD)"

      - name: Set up Java for Maven tests
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests from qa branch
        run: |
          echo "Running all tests from QA branch..."
          if mvn clean test -B; then
            echo "Tests passed successfully"
          else
            echo "TEST_FAILED=true" >> $GITHUB_ENV
            echo "Tests failed, but continuing to generate report if possible"
          fi
          
          echo "Generating Allure report..."
          if [ -d "target/allure-results" ] && [ "$(ls -A target/allure-results)" ]; then
            if mvn allure:report -B; then
              echo "Allure report generated successfully"
              echo "ALLURE_REPORT_GENERATED=true" >> $GITHUB_ENV
            else
              echo "ALLURE_REPORT_FAILED=true" >> $GITHUB_ENV
              echo "Failed to generate Allure report"
            fi
          else
            echo "ALLURE_REPORT_FAILED=true" >> $GITHUB_ENV
            echo "No test results found for Allure report generation"
          fi
          
          echo "QA test execution completed"

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ github.run_number }}
          path: target/allure-results/
          retention-days: 30

      - name: Upload Allure Report
        if: env.ALLURE_REPORT_GENERATED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_number }}
          path: target/site/allure-maven-plugin/
          retention-days: 30

      - name: Notify Slack if any deployment step fails
        if: env.TEST_FAILED == 'true' || env.ALLURE_REPORT_FAILED == 'true'
        uses: abinoda/slack-action@master
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          args: '{\"channel\":\"${{ secrets.SLACK_CHANNEL_ID }}\",\"text\":\":x: *Frontend QA CI:* Tests or Allure Report Failed!\nðŸ”— <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow>\"}'

      - name: Notify Slack on successful deployment
        if: success() && !(env.TEST_FAILED == 'true' || env.ALLURE_REPORT_FAILED == 'true')
        uses: abinoda/slack-action@master
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          args: '{\"channel\":\"${{ secrets.SLACK_CHANNEL_ID }}\",\"text\":\":white_check_mark: *Frontend QA CI:* Tests and Allure Report Successful!\n:rocket: Branch: `${{ github.ref_name }}`\n:package: Commit: `${{ github.sha }}`\nðŸ”— <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow>\"}'


      - name: Switch back to original branch
        if: always()
        run: |
          echo "Switching back to original branch: ${{ steps.vars.outputs.original_branch }}"
          git checkout ${{ steps.vars.outputs.original_branch }}
          echo "Back on branch: $(git rev-parse --abbrev-ref HEAD)"

  test:
    name: Run Tests and Notify
    uses: ./.github/workflows/deploy-test-and-notify-for-dev.yml
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}

  build:
    name: Build & Push Docker Image
    needs: test
    uses: ./.github/workflows/deploy-build-and-push-for-dev.yml
    secrets:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      ECR_REPO: ${{ secrets.ECR_REPO }}
      EXECUTION_ROLE_ARN: ${{ secrets.EXECUTION_ROLE_ARN }}
      NG_APP_BASE_URL: ${{ secrets.NG_APP_BASE_URL }}

  deploy:
    name: Deploy to ECS (Dev)
    needs: build
    uses: ./.github/workflows/deploy-ecs-for-dev.yml
    secrets:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
      ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
      ECR_REPO: ${{ secrets.ECR_REPO }}
      EXECUTION_ROLE_ARN: ${{ secrets.EXECUTION_ROLE_ARN }}
      TASK_CPU: ${{ secrets.TASK_CPU }}
      TASK_MEMORY: ${{ secrets.TASK_MEMORY }}
      CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
      CONTAINER_PORT: ${{ secrets.CONTAINER_PORT }}
      TASK_FAMILY: ${{ secrets.TASK_FAMILY }}
      TASK_LOG_GROUP: ${{ secrets.TASK_LOG_GROUP }}
